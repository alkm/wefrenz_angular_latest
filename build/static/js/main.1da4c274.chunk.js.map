{"version":3,"sources":["components/animation/animation.js","App.js","serviceWorker.js","index.js"],"names":["Animation","useState","bubbles","setBubbles","bubbledrops","setBubbledrops","hidden","setHidden","hideElements","count","setInterval","console","log","useEffect","a","async","axios","result","data","fetchData","className","map","item","key","id","style","width","height","left","top","background","backgroundColor","opacity","border","borderColor","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAkDeA,MA9Cf,WAAsB,IAAD,EACWC,mBAAS,IADpB,mBACZC,EADY,KACHC,EADG,OAEmBF,mBAAS,IAF5B,mBAEZG,EAFY,KAECC,EAFD,OAGSJ,oBAAS,GAHlB,mBAGZK,EAHY,KAGJC,EAHI,KAiBnB,SAASC,EAAaC,GACpBC,aAAY,WACVD,GAAO,EACPE,QAAQC,IAAIH,GACTA,GAAS,IACVF,GAAU,KAEX,KAEL,OAtBAM,qBAAU,YACU,mBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACKE,IACnB,sCAFc,OACVC,EADU,OAIhBd,EAAWc,EAAOC,KAAKhB,SACvBG,EAAeY,EAAOC,KAAKd,aAC3BI,EAAa,GANG,qCAQlBW,GACAR,QAAQC,IAAI,aACX,IAYD,yBAAKQ,UAAU,qBACZhB,EAAYiB,KAAI,SAAAC,GAAI,OACnB,yBAAKF,UAAW,iBAAiBd,EAAS,SAAW,QAASiB,IAAKD,EAAKE,IACtE,yBAAKJ,UAAY,eACjB,yBAAKA,UAAY,gBACjB,yBAAKA,UAAY,aAChBE,EAAKpB,QAAQmB,KAAI,SAAAC,GAAI,OACpB,yBAAKF,UAAW,OAAOE,EAAKE,GAAID,IAAKD,EAAKE,YAI/CtB,EAAQmB,KAAI,SAAAC,GAAI,OACf,yBAAKF,UAAW,0BAA0BE,EAAKE,GAAID,IAAKD,EAAKE,GAAIC,MAAO,CAACC,MAAQJ,EAAKI,MAAOC,OAASL,EAAKK,OAAQC,KAAMN,EAAKM,KAAMC,IAAKP,EAAKO,IAC5IC,WAAYR,EAAKS,gBAAiBC,QAASV,EAAKU,QAASC,OAAQ,aAAaX,EAAKY,oBChC9EC,MARf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,QCKcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1da4c274.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './animation.css';\n\nfunction Animation() {\n  const [bubbles, setBubbles] = useState([]);\n  const [bubbledrops, setBubbledrops] = useState([]);\n  const [hidden, setHidden] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        'https://api.myjson.com/bins/b3bko',\n      );\n      setBubbles(result.data.bubbles);\n      setBubbledrops(result.data.bubbledrops);\n      hideElements(0);\n    };\n    fetchData();\n    console.log('Mounted');\n  }, []);\n\n  function hideElements(count){\n    setInterval(()=>{\n      count+=1;\n      console.log(count);\n      if(count >= 50){\n        setHidden(true);\n      }\n    }, 1000)\n  }\n  return (\n    <div className=\"bubbles-container\">\n      {bubbledrops.map(item => (\n        <div className={\"bubble-drops \"+(hidden ? 'hidden' : 'show')} key={item.id} >\n          <div className = \"obj-center\"></div>\n          <div className = \"obj-animate\"></div>\n          <div className = \"obj-move\"></div>\n          {item.bubbles.map(item => (\n            <div className={'obj-'+item.id} key={item.id}></div>\n          ))}\n        </div>\n      ))}\n      {bubbles.map(item => (\n        <div className={'bubbles-design bubbles-'+item.id} key={item.id} style={{width : item.width, height : item.height, left: item.left, top: item.top,\n          background: item.backgroundColor, opacity: item.opacity, border: '1px solid '+item.borderColor}}>\n        </div>\n      ))}\n    </div>\n  );\n}\nexport default Animation;\n","import React from 'react';\nimport './App.css';\nimport Animation from './components/animation/animation.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Animation/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}